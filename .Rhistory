) +
theme(legend.title = element_blank()) +
xlab("")
dev.off()
pdf(file = "~/Dropbox/LEMMA_shared/JS code branch/lemma input and output/SF June 27/SFJune27-Cases and Pct Pos vs Rt.pdf", width = 10, height = 7)
coeff <- 30
ggplot(dt, aes(x=date)) +
geom_line( aes(y=pos.s, color = "Cases")) +
geom_line( aes(y=Rt * coeff, color = "Rt")) + # Divide by 10 to get the same range than the temperature
scale_y_continuous(
# Features of the first axis
name = "Cases",
# Add a second axis and specify its features
sec.axis = sec_axis(~./coeff, name="Rt")
) +
theme(legend.title = element_blank()) +
xlab("")
coeff <- 1/30
ggplot(dt, aes(x=date)) +
geom_line( aes(y=pct.s, color = "Percent Positive")) +
geom_line( aes(y=Rt * coeff, color = "Rt")) + # Divide by 10 to get the same range than the temperature
scale_y_continuous(
# Features of the first axis
name = "Percent Positive",
# Add a second axis and specify its features
sec.axis = sec_axis(~./coeff, name="Rt")
) +
theme(legend.title = element_blank()) +
xlab("")
dev.off()
pdf(file = "~/Dropbox/LEMMA_shared/JS code branch/lemma input and output/SF June 27/SFJune27-Cases and Pct Pos vs Rt.pdf", width = 10, height = 7)
coeff <- 30
ggplot(dt, aes(x=date)) +
geom_line( aes(y=pos.s, color = "Cases")) +
geom_line( aes(y=Rt * coeff, color = "Rt")) + # Divide by 10 to get the same range than the temperature
scale_y_continuous(
# Features of the first axis
name = "Cases",
# Add a second axis and specify its features
sec.axis = sec_axis(~./coeff, name="Rt")
) +
theme(legend.title = element_blank()) +
xlab("")
coeff <- 1/20
ggplot(dt, aes(x=date)) +
geom_line( aes(y=pct.s, color = "Percent Positive")) +
geom_line( aes(y=Rt * coeff, color = "Rt")) + # Divide by 10 to get the same range than the temperature
scale_y_continuous(
# Features of the first axis
name = "Percent Positive",
# Add a second axis and specify its features
sec.axis = sec_axis(~./coeff, name="Rt")
) +
theme(legend.title = element_blank()) +
xlab("")
dev.off()
dt <- fread("https://data.ca.gov/dataset/529ac907-6ba1-4cb7-9aae-8966fc96aeef/resource/42d33765-20fd-44b8-a978-b083b7542225/download/hospitals_by_county.csv")
dt
dt <- dt[county == "San Francisco"]
dt
dt[, date := as.Date(todays_date)]
dt
setkey(dt, "date")
dt[, .(date, hospitalized_covid_confirmed_patients, previous_days_covid_confirmed_patients)]
dt[, .(date, hospitalized_covid_confirmed_patients, previous_days_covid_confirmed_patients, previous_days_suspected_covid_patients, previous_days_conversion_covid_patients)]
library(LEMMA)
devtools::load_all()
source('~/Dropbox (UC Berkeley Biostat)/LEMMA_shared/JS code branch/hosp change.R')
source('~/Dropbox (UC Berkeley Biostat)/LEMMA_shared/JS code branch/hosp change.R')
summary(rstan::extract(fit.extended, pars = "frac_hosp_eps")[[1]])
summary(rstan::extract(result_june_3$fit.extended, pars = "frac_hosp_eps")[[1]])
summary(rstan::extract(result_june_3$fit.extended, pars = "frac_hosp")[[1]])
colMedians(rstan::extract(result_june_3$fit.extended, pars = "frac_hosp")[[1]])
source('~/Dropbox (UC Berkeley Biostat)/LEMMA_shared/JS code branch/hosp change.R')
seir_inputs$mu_frac_hosp
decline.range
seq(hosp.change, 0, length.out = decline.days)
seir_inputs$mu_frac_hosp <- rep(seir_inputs$mu_frac_hosp, nt)
seir_inputs$mu_frac_hosp[decline.range] <- seir_inputs$mu_frac_hosp[decline.range] - seq(0, hosp.change, length.out = decline.days)
increase.range <- (as.Date("2020/7/1") - inputs$internal.args$simulation.start.date):nt
seir_inputs$mu_frac_hosp[increase.range] <- seir_inputs$mu_frac_hosp[increase.range] + hosp.change
seir_inputs
seir_inputs$mu_frac_hosp
seir_inputs <- GetStanInputs(inputs)
seir_inputs$extend <- 0L
internal.args <- inputs$internal.args
start.decline <- start.decline.date - inputs$internal.args$simulation.start.date
decline.days <- 14
decline.range <- start.decline:(start.decline + decline.days - 1)
nt <- seir_inputs$nt
seir_inputs$mu_frac_hosp <- rep(seir_inputs$mu_frac_hosp, nt)
seir_inputs$mu_frac_hosp[decline.range] <- seir_inputs$mu_frac_hosp[decline.range] - seq(0, hosp.change, length.out = decline.days)
increase.range <- (as.Date("2020/7/1") - inputs$internal.args$simulation.start.date):nt
seir_inputs$mu_frac_hosp[increase.range] <- seir_inputs$mu_frac_hosp[increase.range] + hosp.change
source('~/Dropbox (UC Berkeley Biostat)/LEMMA_shared/JS code branch/hosp change.R')
seir_inputs$mu_frac_hosp
devtools::load_all()
source('~/Dropbox (UC Berkeley Biostat)/LEMMA_shared/JS code branch/hosp change.R')
seir_inputs$mu_frac_hosp
seir_inputs <- GetStanInputs(inputs)
seir_inputs$extend <- 0L
internal.args <- inputs$internal.args
start.decline <- start.decline.date - inputs$internal.args$simulation.start.date
decline.days <- 14
decline.range <- start.decline:(start.decline + decline.days - 1)
nt <- seir_inputs$nt
seir_inputs$mu_frac_hosp <- rep(seir_inputs$mu_frac_hosp, nt)
seir_inputs$mu_frac_hosp[decline.range] <- seir_inputs$mu_frac_hosp[decline.range] - seq(0, hosp.change, length.out = decline.days)
seir_inputs$mu_frac_hosp[(start.decline + decline.days):nt] <- seir_inputs$mu_frac_hosp[(start.decline + decline.days):nt] - hosp.change
increase.range <- (as.Date("2020/7/1") - inputs$internal.args$simulation.start.date):nt
seir_inputs$mu_frac_hosp[increase.range] <- seir_inputs$mu_frac_hosp[increase.range] + hosp.change
seir_inputs$mu_frac_hosp
source('~/Dropbox (UC Berkeley Biostat)/LEMMA_shared/JS code branch/hosp change.R')
source('~/Dropbox (UC Berkeley Biostat)/LEMMA_shared/JS code branch/hosp change.R')
source('~/Dropbox (UC Berkeley Biostat)/LEMMA_shared/JS code branch/hosp change.R')
pdf(file = "~/Dropbox/LEMMA_shared/JS code branch/lemma input and output/SF June 27/SFJune27-age change.pdf", width = 10, height = 7)
PlotRt(result_june_3, "Hosptialization Rate decreases by 3% starting June 10, returns to previous on July 1")
dev.off()
start.decline.date <- as.Date("2020/5/5")
hosp.change <- 0
result_0 <- LEMMA::CredibilityIntervalFromExcel(input.file)
PlotRt(result_0)
PlotRt(result_0, "")
PlotRt(result_june_3, "Hosptialization Rate decreases by 3% starting June 10, returns to previous on July 1")
pdf(file = "~/Dropbox/LEMMA_shared/JS code branch/lemma input and output/SF June 27/SFJune27-age change.pdf", width = 10, height = 7)
PlotRt(result_june_3, "Hosptialization Rate decreases by 3% starting June 10, returns to previous on July 1")
dev.off()
colMedians(rstan::extract(result_june_3$fit.extended, pars = "frac_hosp")[[1]])
devtools::load_all()
debugSource('~/Dropbox (UC Berkeley Biostat)/jsLEMMA/R/CredibilityInterval.R')
rm(list = ls())
source('~/Dropbox (UC Berkeley Biostat)/LEMMA_shared/JS code branch/hosp change.R')
seir_inputs$mu_frac_hosp
start.decline.date <- as.Date("2020/6/10")
hosp.change <- 0.03
result_june_3 <- LEMMA::CredibilityIntervalFromExcel(input.file)
seir_inputs$mu_frac_hosp
source('~/Dropbox (UC Berkeley Biostat)/LEMMA_shared/JS code branch/hosp change.R')
source('~/Dropbox (UC Berkeley Biostat)/LEMMA_shared/JS code branch/hosp change.R')
colMedians(rstan::extract(result_june_3$fit.extended, pars = "frac_hosp")[[1]])
?loess
x <- fread("~/Dropbox/LEMMA_shared/JS code branch/hosp rate by age.csv")
library(data.table)
library(jsonlite)
library(httr)
request <- GET("https://data.sfgov.org/resource/sunc-2t3k.json")
response <- content(request, as = "text", encoding = "UTF-8")
dt <- as.data.table(fromJSON(response))
dt[, date := as.Date(specimen_collection_date)]
dt$new_confirmed_cases <- as.numeric(dt$new_confirmed_cases)
# dt[, month1 := months(date)]
#dt[, month1 := trunc(as.numeric(date - as.Date("2020/1/1")) / 14 )]
dt[, month1 := date]
dt1 <- dt[, .(cases = sum(new_confirmed_cases)), keyby = c("age_group", "month1")]
dt2 <- merge(dt1[, .(age_group, age.frac = cases / sum(cases)), by = "month1"], x, by = "age_group")
dt[, month1 := months(date)]
dt1 <- dt[, .(cases = sum(new_confirmed_cases)), keyby = c("age_group", "month1")]
dt2 <- merge(dt1[, .(age_group, age.frac = cases / sum(cases)), by = "month1"], x, by = "age_group")
setkey(dt2, "month1", "age_group")
dt2
ggplot(dt2[month1 %in% c("April", "June")]) + geom_bar()
ggplot(dt2[month1 %in% c("April", "June")], aes(x=month1, y = age.frac)) + geom_bar()
ggplot(dt, aes(fill=age_group, y=age.frac, x=month1)) +
geom_bar(position="fill", stat="identity")
ggplot(dt2[month1 %in% c("April", "June")], aes(fill=age_group, y=age.frac, x=month1)) +
geom_bar(position="fill", stat="identity")
cbPalette <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
ggplot(dt2[month1 %in% c("April", "June")], aes(fill=age_group, y=age.frac, x=month1)) +
geom_bar(position="fill", stat="identity") + scale_fill_manual(values=cbPalette)
ggplot(dt2[month1 %in% c("April", "June")], aes(fill=age_group, y=age.frac, x=month1)) +
geom_bar(position="fill", stat="identity") + scale_fill_manual(values=cbPalette) + xlab("") + ylab("Fraction in Age Category")
ggplot(dt2[month1 %in% c("April", "June")], aes(fill=age_group, y=age.frac, x=month1)) +
geom_bar(position="fill", stat="identity") + scale_fill_manual(values=cbPalette) + xlab("") + ylab("Fraction Confirmed Cases in Age Category")
result <- LEMMA::CredibilityIntervalFromExcel("~/Dropbox/LEMMA_shared/JS code branch/lemma input and output/SF June 28/SFJune28_shortLOS.xlsx")
library(LEMMA)
devtools::load_all()
result <- LEMMA::CredibilityIntervalFromExcel("~/Dropbox/LEMMA_shared/JS code branch/lemma input and output/SF June 28/SFJune28_shortLOS.xlsx")
result$inputs$params
result <- LEMMA::CredibilityIntervalFromExcel("~/Dropbox/LEMMA_shared/JS code branch/lemma input and output/SF June 29/SFJune29.xlsx")
#result <- LEMMA::CredibilityIntervalFromExcel("~/Dropbox/LEMMA_shared/JS code branch/lemma input and output/SF June 28/SFJune28.xlsx")
rt <- colMedians(rstan::extract(result$fit.to.data, pars = "Rt")[[1]])
rt <- rt[1:(length(rt) - 13)]
library(data.table)
library(jsonlite)
library(httr)
request <- GET("https://data.sfgov.org/resource/nfpa-mg4g.json")
response <- content(request, as = "text", encoding = "UTF-8")
dt <- as.data.table(fromJSON(response))
dt[, date := as.Date(specimen_collection_date)]
dt[date >= as.Date("2020/2/17") & date <= as.Date("2020/6/28"), Rt := rt]
dt$pos <- as.numeric(dt$pos)
#result <- LEMMA::CredibilityIntervalFromExcel("~/Dropbox/LEMMA_shared/JS code branch/lemma input and output/SF June 28/SFJune28.xlsx")
rt <- colMedians(rstan::extract(result$fit.to.data, pars = "Rt")[[1]])
rt <- rt[1:(length(rt) - 13)]
library(data.table)
library(jsonlite)
library(httr)
request <- GET("https://data.sfgov.org/resource/nfpa-mg4g.json")
response <- content(request, as = "text", encoding = "UTF-8")
dt <- as.data.table(fromJSON(response))
dt[, date := as.Date(specimen_collection_date)]
dt[date >= as.Date("2020/2/17") & date <= as.Date("2020/6/29"), Rt := rt]
dt
rt
#result <- LEMMA::CredibilityIntervalFromExcel("~/Dropbox/LEMMA_shared/JS code branch/lemma input and output/SF June 28/SFJune28.xlsx")
rt <- colMedians(rstan::extract(result$fit.to.data, pars = "Rt")[[1]])
d.rt <- data.table(date = seq(as.Date("2020/2/17"), as.Date("2020/6/29") - 14), rt = rt[1:(length(rt) - 13)])
d.rt <- data.table(date = seq(as.Date("2020/2/17"), as.Date("2020/6/29") - 14, by = "day"), rt = rt[1:(length(rt) - 13)])
d.rt <- data.table(date = seq(as.Date("2020/2/17"), as.Date("2020/6/29") - 14, by = "day"), rt = rt[1:(length(rt) - 14)])
d.rt
library(data.table)
library(jsonlite)
library(httr)
request <- GET("https://data.sfgov.org/resource/nfpa-mg4g.json")
response <- content(request, as = "text", encoding = "UTF-8")
dt <- as.data.table(fromJSON(response))
dt[, date := as.Date(specimen_collection_date)]
dt
dt <- merge(dt, d.rt, all=T)
dt
dt$pos <- as.numeric(dt$pos)
dt$pct <- as.numeric(dt$pct)
Loess <- function(values, span) {
dt <- data.table(values, index = 1:length(values))
m <- loess(values ~ index, data = dt, degree = 1, span = span)
predict(m)
}
dt[, pos.s := Loess(pos, 0.3)]
dt <- dt[!is.na(pos) & !is.na(rt)]
dt
Loess <- function(values, span) {
dt <- data.table(values, index = 1:length(values))
m <- loess(values ~ index, data = dt, degree = 1, span = span)
predict(m)
}
dt[, pos.s := Loess(pos, 0.3)]
dt[, pct.s := Loess(pct, 0.3)]
pdf(file = "~/Dropbox/LEMMA_shared/JS code branch/lemma input and output/SF June 27/SFJune27-Cases and Pct Pos vs Rt.pdf", width = 10, height = 7)
coeff <- 30
ggplot(dt, aes(x=date)) +
geom_line( aes(y=pos.s, color = "Cases")) +
geom_line( aes(y=Rt * coeff, color = "Rt")) + # Divide by 10 to get the same range than the temperature
scale_y_continuous(
# Features of the first axis
name = "Cases",
# Add a second axis and specify its features
sec.axis = sec_axis(~./coeff, name="Rt")
) +
theme(legend.title = element_blank()) +
xlab("")
coeff <- 1/20
ggplot(dt, aes(x=date)) +
geom_line( aes(y=pct.s, color = "Percent Positive")) +
geom_line( aes(y=Rt * coeff, color = "Rt")) + # Divide by 10 to get the same range than the temperature
scale_y_continuous(
# Features of the first axis
name = "Percent Positive",
# Add a second axis and specify its features
sec.axis = sec_axis(~./coeff, name="Rt")
) +
theme(legend.title = element_blank()) +
xlab("")
dev.off()
#result <- LEMMA::CredibilityIntervalFromExcel("~/Dropbox/LEMMA_shared/JS code branch/lemma input and output/SF June 28/SFJune28.xlsx")
rt <- colMedians(rstan::extract(result$fit.to.data, pars = "Rt")[[1]])
d.rt <- data.table(date = seq(as.Date("2020/2/17"), as.Date("2020/6/29") - 14, by = "day"), Rt = rt[1:(length(rt) - 14)])
library(data.table)
library(jsonlite)
library(httr)
request <- GET("https://data.sfgov.org/resource/nfpa-mg4g.json")
response <- content(request, as = "text", encoding = "UTF-8")
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
g <- ggplot(dt, aes(x=date)) +
geom_point(aes(y=pos, color = "Cases")) +
geom_line( aes(y=pos.s, color = "Cases")) +
geom_line( aes(y=Rt * coeff, color = "Rt")) + # Divide by 10 to get the same range than the temperature
scale_y_continuous(
# Features of the first axis
name = "Cases",
# Add a second axis and specify its features
sec.axis = sec_axis(~./coeff, name="Rt")
) +
theme(legend.title = element_blank()) +
xlab("")
print(g)
coeff <- 30
g <- ggplot(dt, aes(x=date)) +
geom_point(aes(y=pos, color = "Cases")) +
geom_line( aes(y=pos.s, color = "Cases")) +
geom_line( aes(y=Rt * coeff, color = "Rt")) + # Divide by 10 to get the same range than the temperature
scale_y_continuous(
# Features of the first axis
name = "Cases",
# Add a second axis and specify its features
sec.axis = sec_axis(~./coeff, name="Rt")
) +
theme(legend.title = element_blank()) +
xlab("")
print(g)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
result$inputs$obs.data$hosp.conf
result$inputs$obs.data
result$inputs$obs.data$date
dt2 <- merge(dt, result$inputs$obs.data[, .(date, hosp.conf)])
g <- ggplot(dt2, aes(x=date)) +
geom_point( aes(y=pct, color = "Percent Positive")) +
geom_line( aes(y=pct.s, color = "Percent Positive")) +
geom_line( aes(y=Rt * coeff, color = "Hospitalizations")) +
scale_y_continuous(
# Features of the first axis
name = "Percent Positive",
# Add a second axis and specify its features
sec.axis = sec_axis(~./coeff, name="Hospitalizations")
) +
theme(legend.title = element_blank()) +
xlab("") +
coord_cartesian(ylim = c(0, 0.2))
print(g)
dt2 <- merge(dt, result$inputs$obs.data[, .(date, hosp.conf)])
g <- ggplot(dt2, aes(x=date)) +
geom_point( aes(y=pct, color = "Percent Positive")) +
geom_line( aes(y=pct.s, color = "Percent Positive")) +
geom_line( aes(y=hosp.conf * coeff, color = "Hospitalizations")) +
scale_y_continuous(
# Features of the first axis
name = "Percent Positive",
# Add a second axis and specify its features
sec.axis = sec_axis(~./coeff, name="Hospitalizations")
) +
theme(legend.title = element_blank()) +
xlab("") +
coord_cartesian(ylim = c(0, 0.2))
print(g)
dt2
coeff <- 100
dt2 <- merge(dt, result$inputs$obs.data[, .(date, hosp.conf)])
g <- ggplot(dt2, aes(x=date)) +
geom_point( aes(y=pct, color = "Percent Positive")) +
geom_line( aes(y=pct.s, color = "Percent Positive")) +
geom_line( aes(y=hosp.conf * coeff, color = "Hospitalizations")) +
scale_y_continuous(
# Features of the first axis
name = "Percent Positive",
# Add a second axis and specify its features
sec.axis = sec_axis(~./coeff, name="Hospitalizations")
) +
theme(legend.title = element_blank()) +
xlab("") +
coord_cartesian(ylim = c(0, 0.2))
print(g)
coeff <- 1/100
dt2 <- merge(dt, result$inputs$obs.data[, .(date, hosp.conf)])
g <- ggplot(dt2, aes(x=date)) +
geom_point( aes(y=pct, color = "Percent Positive")) +
geom_line( aes(y=pct.s, color = "Percent Positive")) +
geom_line( aes(y=hosp.conf * coeff, color = "Hospitalizations")) +
scale_y_continuous(
# Features of the first axis
name = "Percent Positive",
# Add a second axis and specify its features
sec.axis = sec_axis(~./coeff, name="Hospitalizations")
) +
theme(legend.title = element_blank()) +
xlab("") +
coord_cartesian(ylim = c(0, 0.2))
print(g)
coeff <- 1/200
dt2 <- merge(dt, result$inputs$obs.data[, .(date, hosp.conf)])
g <- ggplot(dt2, aes(x=date)) +
geom_point( aes(y=pct, color = "Percent Positive")) +
geom_line( aes(y=pct.s, color = "Percent Positive")) +
geom_line( aes(y=hosp.conf * coeff, color = "Hospitalizations")) +
scale_y_continuous(
# Features of the first axis
name = "Percent Positive",
# Add a second axis and specify its features
sec.axis = sec_axis(~./coeff, name="Hospitalizations")
) +
theme(legend.title = element_blank()) +
xlab("") +
coord_cartesian(ylim = c(0, 0.2))
print(g)
coeff <- 1/300
dt2 <- merge(dt, result$inputs$obs.data[, .(date, hosp.conf)])
g <- ggplot(dt2, aes(x=date)) +
geom_point( aes(y=pct, color = "Percent Positive")) +
geom_line( aes(y=pct.s, color = "Percent Positive")) +
geom_line( aes(y=hosp.conf * coeff, color = "Hospitalizations")) +
scale_y_continuous(
# Features of the first axis
name = "Percent Positive",
# Add a second axis and specify its features
sec.axis = sec_axis(~./coeff, name="Hospitalizations")
) +
theme(legend.title = element_blank()) +
xlab("") +
coord_cartesian(ylim = c(0, 0.2))
print(g)
coeff <- 1/400
dt2 <- merge(dt, result$inputs$obs.data[, .(date, hosp.conf)])
g <- ggplot(dt2, aes(x=date)) +
geom_point( aes(y=pct, color = "Percent Positive")) +
geom_line( aes(y=pct.s, color = "Percent Positive")) +
geom_line( aes(y=hosp.conf * coeff, color = "Hospitalizations")) +
scale_y_continuous(
# Features of the first axis
name = "Percent Positive",
# Add a second axis and specify its features
sec.axis = sec_axis(~./coeff, name="Hospitalizations")
) +
theme(legend.title = element_blank()) +
xlab("") +
coord_cartesian(ylim = c(0, 0.2))
print(g)
coeff <- 1/600
dt2 <- merge(dt, result$inputs$obs.data[, .(date, hosp.conf)])
g <- ggplot(dt2, aes(x=date)) +
geom_point( aes(y=pct, color = "Percent Positive")) +
geom_line( aes(y=pct.s, color = "Percent Positive")) +
geom_line( aes(y=hosp.conf * coeff, color = "Hospitalizations")) +
scale_y_continuous(
# Features of the first axis
name = "Percent Positive",
# Add a second axis and specify its features
sec.axis = sec_axis(~./coeff, name="Hospitalizations")
) +
theme(legend.title = element_blank()) +
xlab("") +
coord_cartesian(ylim = c(0, 0.2))
print(g)
dt2[, hosp.conf.s := Loess(hosp.conf, 0.3)]
g <- ggplot(dt2, aes(x=date)) +
geom_point( aes(y=pct, color = "Percent Positive")) +
geom_line( aes(y=pct.s, color = "Percent Positive")) +
geom_point( aes(y=hosp.conf * coeff, color = "Hospitalizations")) +
geom_line( aes(y=hosp.conf.s * coeff, color = "Hospitalizations")) +
scale_y_continuous(
# Features of the first axis
name = "Percent Positive",
# Add a second axis and specify its features
sec.axis = sec_axis(~./coeff, name="Hospitalizations")
) +
theme(legend.title = element_blank()) +
xlab("") +
coord_cartesian(ylim = c(0, 0.2))
print(g)
dt2 <- merge(dt, result$inputs$obs.data[, .(date, hosp.conf)])
dt2[, hosp.conf.s := Loess(hosp.conf, 0.2)]
g <- ggplot(dt2, aes(x=date)) +
geom_point( aes(y=pct, color = "Percent Positive")) +
geom_line( aes(y=pct.s, color = "Percent Positive")) +
geom_point( aes(y=hosp.conf * coeff, color = "Hospitalizations")) +
geom_line( aes(y=hosp.conf.s * coeff, color = "Hospitalizations")) +
scale_y_continuous(
# Features of the first axis
name = "Percent Positive",
# Add a second axis and specify its features
sec.axis = sec_axis(~./coeff, name="Hospitalizations")
) +
theme(legend.title = element_blank()) +
xlab("") +
coord_cartesian(ylim = c(0, 0.2))
print(g)
dt
source('~/.active-rstudio-document')
dt2
dt2
dt2[, .(date, hosp.conf)]
source('~/.active-rstudio-document')
dt2
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/Dropbox (UC Berkeley Biostat)/LEMMA_shared/JS code branch/hosp change.R')
devtools::load_all()
input.file <- "~/Dropbox/LEMMA_shared/JS code branch/lemma input and output/SF June 27/SFJune27-age change.xlsx"
if (F) {
start.decline.date <- as.Date("2020/5/5")
hosp.change <- 0
result_0 <- LEMMA::CredibilityIntervalFromExcel(input.file)
PlotRt(result_0)
}
start.decline.date <- as.Date("2020/6/10")
hosp.change <- 0.03
result_june_3 <- LEMMA::CredibilityIntervalFromExcel(input.file)
pdf(file = "~/Dropbox/LEMMA_shared/JS code branch/lemma input and output/SF June 27/SFJune27-age change.pdf", width = 10, height = 7)
PlotRt(result_june_3, "Hosptialization Rate decreases by 3% starting June 10, returns to previous on July 1")
dev.off()
unload()
devtools::unload()
result <- LEMMA::CredibilityIntervalFromExcel("~/Dropbox/LEMMA_shared/JS code branch/lemma input and output/SF June 29/SFJune29.xlsx")
result <- LEMMA::CredibilityIntervalFromExcel("~/Dropbox/LEMMA_shared/JS code branch/lemma input and output/SF June 29/SFJune29.xlsx")
LEMMA:::CredibilityInterval
devtools::unload()
LEMMA:::CredibilityInterval
source('~/.active-rstudio-document')
result <- LEMMA::CredibilityIntervalFromExcel("~/Dropbox/LEMMA_shared/JS code branch/lemma input and output/SF June 29/SFJune29.xlsx")
source('~/Dropbox (UC Berkeley Biostat)/LEMMA_shared/JS code branch/RunCAcounties-script.R')
county.set
source('~/Dropbox (UC Berkeley Biostat)/LEMMA_shared/JS code branch/RunCAcounties-script.R')
source('~/Documents/GitHub/LEMMA-Forecasts/Code/RunCAcounties.R')
source('~/Documents/GitHub/LEMMA-Forecasts/Code/RunCAcounties.R')
